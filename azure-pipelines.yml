# Starter pipeline

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

resources:
  repositories:
  - repository: ranjith-rafay
    type: github
    name: ranjith-rafay/rafay-cicd-helpers
    endpoint: ranjith-rafay
    ref: master

variables:
  workload_yaml: $(System.DefaultWorkingDirectory)/workload/helm3/manifests/workload-spec.yaml
  create_ns_yaml: $(System.DefaultWorkingDirectory)/workload/helm3/manifests/rafay_create_ns.yaml
pool:
  vmImage: 'ubuntu-latest'

steps:
- task: CmdLine@2
  inputs:
    script: |
      echo '$(System.DefaultWorkingDirectory)/workload/helm3/manifests/workload-spec.yaml'
      echo '$(System.DefaultWorkingDirectory)/workload/helm3/manifests/rafay_create_ns.yaml'
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      workload=$(sudo cat $(workload_yaml) | grep -iw name | awk '{print $2}')
      namespace=$(sudo cat $(workload_yaml) | grep -iw namespace | awk '{print $2}')
      cluster=$(sudo cat $(workload_yaml) | grep -iw clusters | awk '{print $2}' | tr -d '"')
      echo "##vso[task.setvariable variable=workload]$workload"
      echo "##vso[task.setvariable variable=namespace]$namespace"
      echo "##vso[task.setvariable variable=cluster]$cluster"
      echo "My output"
      echo "${workload}"
      echo "My ns"
      echo "${namespace}"
      echo "My Cluster"
      echo "${cluster}"
  displayName: GetParamters
  name: GetWorkload

- script: |
    export RCTL_PROFILE=$(RCTL_PROFILE)
    export RCTL_API_KEY=$(RCTL_API_KEY)
    export RCTL_API_SECRET=$(RCTL_API_SECRET)
    export RCTL_PROJECT=$(RCTL_PROJECT)
    export RCTL_REST_ENDPOINT=$(RCTL_REST_ENDPOINT)
    export RCTL_OPS_ENDPOINT=$(RCTL_OPS_ENDPOINT)
    wget -O ${HOME}/rctl-linux-amd64.tar.bz2 https://s3-us-west-2.amazonaws.com/rafay-prod-cli/publish/rctl-linux-amd64.tar.bz2
    tar -C ${HOME} -xf ${HOME}/rctl-linux-amd64.tar.bz2
    set +e
    `sudo sed "s/%ns_name%/$(namespace)/g; s/%cluster_name%/$(cluster)/g" $(create_ns_yaml)  > create_ns.yaml`
    echo "Go"
    cat create_ns.yaml
    echo $(workload)
    echo $(namespace)
    echo $(cluster)
    chmod 777 ${HOME}/rctl
    ${HOME}/rctl config show
    ${HOME}/rctl get namespace | awk {'print $2'}| grep -v NAME | awk '!/^$/' > /tmp/getns.out
    grep -i $(workload) /tmp/namespacegetns.out > /dev/null 2>&1
    if [ $? -eq 1 ]; then
      ${HOME}/rctl create ns -f ns_create.yaml
      ${HOME}/rctl publish ns $(namespace)
    fi
    rm /tmp/getns.out
    workload_status=`${HOME}/rctl status workload $(workload) -o json|jq .result[].status|tr -d '"'`
    if [ "$workload_status" = "Ready" ];
    then
      echo "Workload is already deployed and running"
      exit 0
    fi
    ${HOME}/rctl create workload $(workload_yaml)
    echo "Done First"
    ${HOME}/rctl publish workload $(workload)
    echo "Done Second"
    workload_status="Not Ready"
    workload_status_iterations=1
    while [ "$workload_status" != "Ready" ];
    do
      workload_status=`${HOME}/rctl status workload $(workload) -o json|jq .result[].status|tr -d '"'`
      echo $workload_status
      sleep 10
      if [ $workload_status_iterations -ge 10 ] && [ $workload_status = "InProgress" ];
      then
        echo "Workload Deployment Failed"
        break
      fi
      if [ "$workload_status" = "Failed" ];
      then
        echo "Workload Deployment Failed"
        break
      fi
      workload_status_iterations=$((workload_status_iterations+1))
    done
  displayName: 'create and publish workload'