# Starter pipeline

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

resources:
  repositories:
  - repository: ranjith-rafay
    type: github
    name: ranjith-rafay/rafay-cicd-helpers
    endpoint: ranjith-rafay
    ref: master

variables:
  workload_yaml: $(System.DefaultWorkingDirectory)/workload/helm3/manifests/workload-spec.yaml

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: CmdLine@2
  inputs:
    script: |
      echo  '$(System.DefaultWorkingDirectory)/workload/helm3/manifests/workload-spec.yaml'
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      workload=$(sudo cat $(workload_yaml) | grep -iw name | awk '{print $2}')
      echo "##vso[task.setvariable variable=workload]$workload"
      echo "My output"
      echo "${workload}"
  displayName: GetWorkload
  name: GetWorkload

- script: |
    export RCTL_PROFILE=$(RCTL_PROFILE)
    export RCTL_API_KEY=$(RCTL_API_KEY)
    export RCTL_API_SECRET=$(RCTL_API_SECRET)
    export RCTL_PROJECT=$(RCTL_PROJECT)
    export RCTL_REST_ENDPOINT=$(RCTL_REST_ENDPOINT)
    export RCTL_OPS_ENDPOINT=$(RCTL_OPS_ENDPOINT)
    wget -O ${HOME}/rctl-linux-amd64.tar.bz2 https://s3-us-west-2.amazonaws.com/rafay-prod-cli/publish/rctl-linux-amd64.tar.bz2
    tar -C ${HOME} -xf ${HOME}/rctl-linux-amd64.tar.bz2
    set +e
    echo "Go"
    echo "${workload}"
    chmod 777 ${HOME}/rctl
    echo $(workload)
    ${HOME}/rctl config show
    workload_status=`${HOME}/rctl status workload $(workload) -o json|jq .result[].status|tr -d '"'`
    echo $workload_status
    if [ "$workload_status" = "Ready" ];
    then
      echo "Workload is already deployed and running"
      exit 1
    fi
    ${HOME}/rctl create workload $(workload_yaml)
    echo "Done First"
    ${HOME}/rctl publish workload $(workload)
    echo "Done Second"
    workload_status="Not Ready"
    workload_status_iterations=1
    while [ "$workload_status" != "Ready" ];
    do
      workload_status=`${HOME}/rctl status workload $(workload) -o json|jq .result[].status|tr -d '"'`
      echo $workload_status
      sleep 10
      if [ $workload_status_iterations -ge 2 ];
      then
        break
      fi
      if [ "$workload_status" = "Failed" ];
      then
        echo "Workload Deployment Failed"
        break
      fi
      workload_status_iterations=$((workload_status_iterations+1))
    done
  displayName: 'create and publish workload'